{{#if publish}}
runs-on: ubuntu-latest
defaults:
  run:
    shell: bash
permissions:
  deployments: write
  id-token: write
steps:
  {{> stepGit jobCheckout=(obj ref="${{ fromJSON(needs.release.outputs.release).tagName }}") }}
  {{> stepNode lockfile=false }}
  - name: Set Publish Token
    run: |
      npm config set '//registry.npmjs.org/:_authToken'=\${PUBLISH_TOKEN}
  - name: Publish
    env:
      PUBLISH_TOKEN: $\{{ secrets.PUBLISH_TOKEN }}
    run: |
      for release in $(echo '$\{{ needs.release.outputs.releases }}' | jq -r '.[] | @base64'); do
        function decode {
          echo "$release" | base64 --decode | jq -r ".$1"
        }

        PUBLISH_FLAGS="--provenance --tag=$(decode "publishTag")"
        if [[ "$(decode "isWorkspace")" == "false" ]]; then
          PUBLISH_FLAGS="$PUBLISH_FLAGS --workspace=$(decode "pkgName")"
        fi

        npm publish $PUBLISH_FLAGS
      done
{{else}}
runs-on: ubuntu-latest
defaults:
  run:
    shell: bash
steps:
  {{> stepNode lockfile=false }}
  - name: View in Registry
    run: |
      EXIT_CODE=0

      function is_published {
        if npm view "$@" --loglevel=error > /dev/null; then
          echo 0
        else
          echo 1
        fi
      }

      for release in $(echo '$\{{ needs.release.outputs.releases }}' | jq -r '.[] | @base64'); do
        function decode {
          echo "$release" | base64 --decode | jq -r ".$1"
        }

        PKG_SPEC=$(decode "pkgName")@$(decode "version")

        if [[ "$(is_published "$PKG_SPEC")" -eq 1 ]]; then
          echo "$PKG_SPEC ERROR"
          EXIT_CODE=$PKG_STATUS
        else
          echo "$PKG_SPEC OK"
        fi
      done

      exit $EXIT_CODE
{{/if}}
